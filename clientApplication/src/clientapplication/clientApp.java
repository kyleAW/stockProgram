/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clientapplication;

import java.awt.Desktop;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
import javax.xml.datatype.XMLGregorianCalendar;
import org.myws.DatatypeConfigurationException_Exception;
import org.netbeans.xml.schema.shares.StockType;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.JLabel;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author Kyle
 */
public class clientApp extends javax.swing.JFrame {

    DefaultTableModel table;
    String selectedStock;
    int amountStock;
    String currencySelected;
    String[] splitCurr;

    /**
     * Creates new form clientApp
     */
    
    public clientApp() {
        initComponents();

        table = (DefaultTableModel) stockTable.getModel();
        
        newsFeed.addHyperlinkListener(new HyperlinkListener() {
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    if (Desktop.isDesktopSupported()) {
                        try{
                            Desktop.getDesktop().browse(e.getURL().toURI());
                            }catch(Exception ex) {
                            ex.printStackTrace();

                        }
                    }
                }
            };
        });    
        startUp();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        stockTable = new javax.swing.JTable();
        AllRadioButton = new javax.swing.JRadioButton();
        PriceRadioButton = new javax.swing.JRadioButton();
        AmountRadioButton = new javax.swing.JRadioButton();
        DateRadioButton = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        List<String> currencyList = getCurrencyCodes();
        String[] currArray = new String[currencyList.size()];
        currArray = currencyList.toArray(currArray);
        CurrencyChoice = new javax.swing.JComboBox<>(currArray);
        title = new javax.swing.JLabel();
        SearchBtn = new javax.swing.JButton();
        SearchField = new javax.swing.JTextField();
        BuyBtn = new javax.swing.JButton();
        SellBtn = new javax.swing.JButton();
        buyAmount = new javax.swing.JTextField();
        sellAmount = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        title1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        newsFeed = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        purchasePane = new javax.swing.JTextPane();
        updatePrices = new javax.swing.JButton();

        jScrollPane3.setViewportView(jTextPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1024, 1440));

        stockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Company", "Symbol", "No of Shares", "Currency", "Price", "Last Updated"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        stockTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        stockTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        stockTable.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        stockTable.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        stockTable.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        stockTable.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
        stockTable.setShowHorizontalLines(false);
        stockTable.setShowVerticalLines(false);
        stockTable.getTableHeader().setReorderingAllowed(false);
        stockTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stockTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(stockTable);

        buttonGroup1.add(AllRadioButton);
        AllRadioButton.setText("All");
        AllRadioButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        AllRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AllRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(PriceRadioButton);
        PriceRadioButton.setText("Price");
        PriceRadioButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PriceRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PriceRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(AmountRadioButton);
        AmountRadioButton.setText("Amount of Shares");
        AmountRadioButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        AmountRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AmountRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(DateRadioButton);
        DateRadioButton.setText("Last Updated");
        DateRadioButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        DateRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateRadioButtonActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        CurrencyChoice.setSelectedIndex(15);
        CurrencyChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CurrencyChoiceActionPerformed(evt);
            }
        });

        title.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setLabelFor(title);
        title.setText("Kyles Stock Program");
        title.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        SearchBtn.setText("Search");
        SearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBtnActionPerformed(evt);
            }
        });

        SearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SearchBtn)
                .addGap(78, 78, 78)
                .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                .addGap(81, 81, 81)
                .addComponent(CurrencyChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CurrencyChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(title))
                .addGap(28, 28, 28))
        );

        BuyBtn.setText("Buy");
        BuyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuyBtnActionPerformed(evt);
            }
        });

        SellBtn.setText("Sell");
        SellBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellBtnActionPerformed(evt);
            }
        });

        sellAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellAmountActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(197, 179, 88));

        title1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        title1.setForeground(new java.awt.Color(255, 255, 255));
        title1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title1.setLabelFor(title);
        title1.setText("News");
        title1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jScrollPane5.setViewportView(newsFeed);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(227, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(286, 286, 286)
                .addComponent(title1, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                .addGap(306, 306, 306))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title1)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(purchasePane);

        updatePrices.setText("Update Share Prices");
        updatePrices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePricesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(274, 274, 274)
                        .addComponent(AllRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(PriceRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(AmountRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(DateRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                        .addGap(293, 293, 293))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buyAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BuyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(sellAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SellBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(138, 138, 138)
                .addComponent(updatePrices)
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DateRadioButton)
                    .addComponent(AmountRadioButton)
                    .addComponent(PriceRadioButton)
                    .addComponent(AllRadioButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BuyBtn)
                        .addComponent(SellBtn)
                        .addComponent(buyAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sellAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(updatePrices))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {AllRadioButton, AmountRadioButton, DateRadioButton, PriceRadioButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startUp(){
        DecimalFormat df = new DecimalFormat("0.00");
        String arg1;
        try {
            arg1 = splitCurr[0];
        } catch (NullPointerException e) {
            arg1 = "GBP";
        }
        double convResult = 1;
        String arg0 = "GBP";

        convResult = getConversionRate(arg0, arg1);
        int rows = table.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            table.removeRow(i);
        }
        List<StockType> collectionStock = allStocks();

        Iterator itr = collectionStock.iterator();
        StockType nextStock;

        while (itr.hasNext()) {
            nextStock = (StockType) itr.next();
            List<String> name = new ArrayList();
            name.add(nextStock.getName());

            List<String> code = new ArrayList();
            code.add(nextStock.getCode());

            List<Integer> amount = new ArrayList();
            amount.add(nextStock.getShareNo());

            List<XMLGregorianCalendar> date = new ArrayList();
            XMLGregorianCalendar dateDeets = nextStock.getStockPrice().getDate();
            date.add(dateDeets);

            List<String> currrency = new ArrayList();
            String currencyDeets = arg1;
            currrency.add(currencyDeets);

            List<Double> price = new ArrayList();
            Double baseCost = nextStock.getStockPrice().getSharePrice();
            Double convPrice = baseCost * convResult;
            Double formatPrice = Double.parseDouble(df.format(convPrice));
            price.add(formatPrice);
            table.insertRow(table.getRowCount(), new Object[]{name.get(0), code.get(0), amount.get(0), currrency.get(0), price.get(0), date.get(0)});

        }
    }
    
    private void PriceRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PriceRadioButtonActionPerformed
        DecimalFormat df = new DecimalFormat("0.00");
        String arg1;
        try {
            arg1 = splitCurr[0];
        } catch (NullPointerException e) {
            arg1 = "GBP";
        }
        double convResult = 1;
        String arg0 = "GBP";

        convResult = getConversionRate(arg0, arg1);

        int rows = table.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            table.removeRow(i);
        }
        List<StockType> collectionStock = priceOrder();

        Iterator itr = collectionStock.iterator();
        StockType nextStock;

        while (itr.hasNext()) {
            nextStock = (StockType) itr.next();
            List<String> name = new ArrayList();
            name.add(nextStock.getName());

            List<String> code = new ArrayList();
            code.add(nextStock.getCode());

            List<Integer> amount = new ArrayList();
            amount.add(nextStock.getShareNo());

            List<XMLGregorianCalendar> date = new ArrayList();
            XMLGregorianCalendar dateDetails = nextStock.getStockPrice().getDate();
            date.add(dateDetails);

            List<String> currrency = new ArrayList();
            String currencyDetails = arg1;
            currrency.add(currencyDetails);

            List<Double> price = new ArrayList();
            Double baseCost = nextStock.getStockPrice().getSharePrice();
            Double convPrice = baseCost * convResult;
            Double formatPrice = Double.parseDouble(df.format(convPrice));
            price.add(formatPrice);
            table.insertRow(table.getRowCount(), new Object[]{name.get(0), code.get(0), amount.get(0), currrency.get(0), price.get(0), date.get(0)});

        }
    }//GEN-LAST:event_PriceRadioButtonActionPerformed

    private void AllRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AllRadioButtonActionPerformed
      startUp();
    }//GEN-LAST:event_AllRadioButtonActionPerformed

    private void AmountRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AmountRadioButtonActionPerformed
        DecimalFormat df = new DecimalFormat("0.00");
        String arg1;
        try {
            arg1 = splitCurr[0];
        } catch (NullPointerException e) {
            arg1 = "GBP";
        }
        double convResult = 1;
        String arg0 = "GBP";

        convResult = getConversionRate(arg0, arg1);
        int rows = table.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            table.removeRow(i);
        }
        List<StockType> collectionStock = shareOrder();

        Iterator itr = collectionStock.iterator();
        StockType nextStock;

        while (itr.hasNext()) {
            nextStock = (StockType) itr.next();
            List<String> name = new ArrayList();
            name.add(nextStock.getName());

            List<String> code = new ArrayList();
            code.add(nextStock.getCode());

            List<Integer> amount = new ArrayList();
            amount.add(nextStock.getShareNo());

            List<XMLGregorianCalendar> date = new ArrayList();
            XMLGregorianCalendar dateDeets = nextStock.getStockPrice().getDate();
            date.add(dateDeets);

            List<String> currrency = new ArrayList();
            String currencyDeets = arg1;
            currrency.add(currencyDeets);

            List<Double> price = new ArrayList();
            Double baseCost = nextStock.getStockPrice().getSharePrice();
            Double convPrice = baseCost * convResult;
            Double formatPrice = Double.parseDouble(df.format(convPrice));
            price.add(formatPrice);
            table.insertRow(table.getRowCount(), new Object[]{name.get(0), code.get(0), amount.get(0), currrency.get(0), price.get(0), date.get(0)});

        }
    }//GEN-LAST:event_AmountRadioButtonActionPerformed

    private void DateRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateRadioButtonActionPerformed
        DecimalFormat df = new DecimalFormat("0.00");
        String arg1;
        try {
            arg1 = splitCurr[0];
        } catch (NullPointerException e) {
            arg1 = "GBP";
        }
        double convResult = 1;
        String arg0 = "GBP";

        convResult = getConversionRate(arg0, arg1);
        int rows = table.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            table.removeRow(i);
        }
        List<StockType> collectionStock = dateOrder();

        Iterator itr = collectionStock.iterator();
        StockType nextStock;

        while (itr.hasNext()) {
            nextStock = (StockType) itr.next();
            List<String> name = new ArrayList();
            name.add(nextStock.getName());

            List<String> code = new ArrayList();
            code.add(nextStock.getCode());

            List<Integer> amount = new ArrayList();
            amount.add(nextStock.getShareNo());

            List<XMLGregorianCalendar> date = new ArrayList();
            XMLGregorianCalendar dateDeets = nextStock.getStockPrice().getDate();
            date.add(dateDeets);

            List<String> currrency = new ArrayList();
            String currencyDeets = arg1;
            currrency.add(currencyDeets);

            List<Double> price = new ArrayList();
            Double baseCost = nextStock.getStockPrice().getSharePrice();
            Double convPrice = baseCost * convResult;
            Double formatPrice = Double.parseDouble(df.format(convPrice));
            price.add(formatPrice);
            table.insertRow(table.getRowCount(), new Object[]{name.get(0), code.get(0), amount.get(0), currrency.get(0), price.get(0), date.get(0)});

        }
    }//GEN-LAST:event_DateRadioButtonActionPerformed

    private void SearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchFieldActionPerformed

    private void SearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBtnActionPerformed
        DecimalFormat df = new DecimalFormat("0.00");
        String arg1;

        try {
            arg1 = splitCurr[0];
        } catch (NullPointerException e) {
            arg1 = "GBP";
        }
        double convResult = 1;
        String arg0 = "GBP";
        convResult = getConversionRate(arg0, arg1);

        int rows = table.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            table.removeRow(i);
        }
        String SearchInput = SearchField.getText();
        List<StockType> collectionStock = searchStock(SearchInput);

        Iterator itr = collectionStock.iterator();
        StockType nextStock;

        while (itr.hasNext()) {
            nextStock = (StockType) itr.next();
            List<String> name = new ArrayList();
            name.add(nextStock.getName());

            List<String> code = new ArrayList();
            code.add(nextStock.getCode());

            List<Integer> amount = new ArrayList();
            amount.add(nextStock.getShareNo());

            List<XMLGregorianCalendar> date = new ArrayList();
            XMLGregorianCalendar dateDeets = nextStock.getStockPrice().getDate();
            date.add(dateDeets);

            List<String> currrency = new ArrayList();
            String currencyDeets = arg1;
            currrency.add(currencyDeets);

            List<Double> price = new ArrayList();
            Double baseCost = nextStock.getStockPrice().getSharePrice();
            Double convPrice = baseCost * convResult;
            Double formatPrice = Double.parseDouble(df.format(convPrice));
            price.add(formatPrice);

            table.insertRow(table.getRowCount(), new Object[]{name.get(0), code.get(0), amount.get(0), currrency.get(0), price.get(0), date.get(0)});
        }

    }//GEN-LAST:event_SearchBtnActionPerformed

    private void SellBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellBtnActionPerformed
        try {
            amountStock = Integer.parseInt(sellAmount.getText());
            System.out.println("amount :" + amountStock);

        } catch (NumberFormatException e) {
            System.out.println("problem with number of shares for sale");
            purchasePane.setText("No Shares");
        }

        try {

            if (selectedStock.trim().isEmpty() || amountStock == 0) {
            } else {
                if (shareSell(selectedStock, amountStock) == true) {
                    purchasePane.setText("Sale Success");
                } else {
                    purchasePane.setText("Sale Failed");
                }
            }
        } catch (NullPointerException e) {
            System.out.println("No company selected");
            purchasePane.setText("No Company");
        }

        int rows = table.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            table.removeRow(i);
        }
        DecimalFormat df = new DecimalFormat("0.00");
        String arg1;
        try {
            arg1 = splitCurr[0];
        } catch (NullPointerException e) {
            arg1 = "GBP";
        }
        double convResult = 1;
        String arg0 = "GBP";

        convResult = getConversionRate(arg0, arg1);
        List<StockType> collectionStock = allStocks();

        Iterator itr = collectionStock.iterator();
        StockType nextStock;

        while (itr.hasNext()) {
            nextStock = (StockType) itr.next();
            List<String> name = new ArrayList();
            name.add(nextStock.getName());

            List<String> code = new ArrayList();
            code.add(nextStock.getCode());

            List<Integer> amount = new ArrayList();
            amount.add(nextStock.getShareNo());

            List<XMLGregorianCalendar> date = new ArrayList();
            XMLGregorianCalendar dateDetails = nextStock.getStockPrice().getDate();
            date.add(dateDetails);

            List<String> currrency = new ArrayList();
            String currencyDeets = arg1;
            currrency.add(currencyDeets);

            List<Double> price = new ArrayList();
            Double baseCost = nextStock.getStockPrice().getSharePrice();
            Double convPrice = baseCost * convResult;
            Double formatPrice = Double.parseDouble(df.format(convPrice));
            price.add(formatPrice);
            table.insertRow(table.getRowCount(), new Object[]{name.get(0), code.get(0), amount.get(0), currrency.get(0), price.get(0), date.get(0)});

        }
    }//GEN-LAST:event_SellBtnActionPerformed

    private void BuyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuyBtnActionPerformed
        try {
            amountStock = Integer.parseInt(buyAmount.getText());

        } catch (NumberFormatException e) {
            System.out.println("problem with number of shares for purchase");
            purchasePane.setText("No Shares");

        }

        try {

            if (selectedStock.trim().isEmpty() || amountStock == 0) {
            } else {
                if (shareBuy(selectedStock, amountStock) == true) {
                    purchasePane.setText("Purchase Success");
                } else {
                    purchasePane.setText("Purchase Failed");
                }
            }
        } catch (NullPointerException e) {
            System.out.println("No company selected");
            purchasePane.setText("No Company");
        }

        int rows = table.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            table.removeRow(i);
        }
        DecimalFormat df = new DecimalFormat("0.00");
        String arg1;
        try {
            arg1 = splitCurr[0];
        } catch (NullPointerException e) {
            arg1 = "GBP";
        }
        double convResult = 1;
        String arg0 = "GBP";

        convResult = getConversionRate(arg0, arg1);
        List<StockType> collectionStock = allStocks();

        Iterator itr = collectionStock.iterator();
        StockType nextStock;

        while (itr.hasNext()) {
            nextStock = (StockType) itr.next();
            List<String> name = new ArrayList();
            name.add(nextStock.getName());

            List<String> code = new ArrayList();
            code.add(nextStock.getCode());

            List<Integer> amount = new ArrayList();
            amount.add(nextStock.getShareNo());

            List<XMLGregorianCalendar> date = new ArrayList();
            XMLGregorianCalendar dateDeets = nextStock.getStockPrice().getDate();
            date.add(dateDeets);

            List<String> currrency = new ArrayList();
            String currencyDeets = arg1;
            currrency.add(currencyDeets);

            List<Double> price = new ArrayList();
            Double baseCost = nextStock.getStockPrice().getSharePrice();
            Double convPrice = baseCost * convResult;
            Double formatPrice = Double.parseDouble(df.format(convPrice));
            price.add(formatPrice);
            table.insertRow(table.getRowCount(), new Object[]{name.get(0), code.get(0), amount.get(0), currrency.get(0), price.get(0), date.get(0)});

        }
    }//GEN-LAST:event_BuyBtnActionPerformed

    private void stockTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stockTableMouseClicked
        // todo
        int selected = stockTable.getSelectedRow();
        selectedStock = table.getValueAt(selected, 0).toString();
        newsClick(selectedStock.replace(" ","&/"));

    }//GEN-LAST:event_stockTableMouseClicked

    private void newsClick(String comp) {
        newsFeed.setContentType("text/html");
        newsFeed.setEditable(false);
        newsFeed.setCaretPosition(0);
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        String todate = dateFormat.format(date);
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -7);
        Date todate1 = cal.getTime();
        String date1 = dateFormat.format(todate1);        
        String api = "https://content.guardianapis.com/search?from-date=" + date1 + "&q=" + comp + "&api-key=09644f75-a4a9-45cf-a9da-bc1f43dc184c";
        URL url;

        try {
            url = new URL(api);

            HttpURLConnection connURL;
            try {
                connURL = (HttpURLConnection) url.openConnection();

                connURL.setRequestMethod("GET");
                BufferedReader ins = new BufferedReader(new InputStreamReader(connURL.getInputStream()));
                String inString;
                StringBuilder JSONresultStr = new StringBuilder();

                while ((inString = ins.readLine()) != null) {
                    JSONresultStr.append(inString);
                }

                ins.close();
                connURL.disconnect();

                JSONObject entireJSON = new JSONObject(JSONresultStr.toString());
                JSONObject responseJSON = entireJSON.getJSONObject("response");
                JSONArray resultsArray = responseJSON.getJSONArray("results");
                String htmlContent = "";
                for (int i = 0; i < resultsArray.length(); i++) {
                    //this bit needs to change. pulled from jsp temporarly
                    htmlContent += "<div><h1>" + resultsArray.getJSONObject(i).getString("webTitle") + "</h1><a href=\'" + resultsArray.getJSONObject(i).getString("webUrl") + "\'>" + resultsArray.getJSONObject(i).getString("webUrl") + "</a></div><hr/>";
                }

                newsFeed.setText(htmlContent);
            } catch (IOException ex) {
                Logger.getLogger(newsAPI.class.getName()).log(Level.SEVERE, null, ex);
                newsFeed.setText("IOException");
                System.out.println("IO problem");

            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(newsAPI.class.getName()).log(Level.SEVERE, null, ex);
            newsFeed.setText("MalformedURLException");
            System.out.println("URL problem");
        }
    }

    private void sellAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sellAmountActionPerformed

    private void CurrencyChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CurrencyChoiceActionPerformed

        currencySelected = CurrencyChoice.getSelectedItem().toString();
        splitCurr = currencySelected.split(" ");

        DecimalFormat df = new DecimalFormat("0.00");

        String arg1;
        try {
            arg1 = splitCurr[0];
        } catch (NullPointerException e) {
            arg1 = "GBP";
        }
        double convResult = 1;
        String arg0 = "GBP";

        convResult = getConversionRate(arg0, arg1);
        int rows = table.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            table.removeRow(i);
        }
        String SearchInput = SearchField.getText();
        List<StockType> collectionStock = searchStock(SearchInput);

        Iterator itr = collectionStock.iterator();
        StockType nextStock;

        while (itr.hasNext()) {
            nextStock = (StockType) itr.next();
            List<String> name = new ArrayList();
            name.add(nextStock.getName());

            List<String> code = new ArrayList();
            code.add(nextStock.getCode());

            List<Integer> amount = new ArrayList();
            amount.add(nextStock.getShareNo());

            List<XMLGregorianCalendar> date = new ArrayList();
            XMLGregorianCalendar dateDeets = nextStock.getStockPrice().getDate();
            date.add(dateDeets);

            List<String> currrency = new ArrayList();
            String currencyDeets = arg1;
            currrency.add(currencyDeets);

            List<Double> price = new ArrayList();
            Double baseCost = nextStock.getStockPrice().getSharePrice();
            Double convPrice = baseCost * convResult;
            Double formatPrice = Double.parseDouble(df.format(convPrice));
            price.add(formatPrice);
            table.insertRow(table.getRowCount(), new Object[]{name.get(0), code.get(0), amount.get(0), currrency.get(0), price.get(0), date.get(0)});
        }

    }//GEN-LAST:event_CurrencyChoiceActionPerformed

    private void updatePricesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePricesActionPerformed
        DecimalFormat df = new DecimalFormat("0.00");
        try {
            updatePrices();
        } catch (DatatypeConfigurationException_Exception ex) {
            Logger.getLogger(clientApp.class.getName()).log(Level.SEVERE, null, ex);
            purchasePane.setText("Unable to Update");
        }

        String arg1;
        try {
            arg1 = splitCurr[0];
        } catch (NullPointerException e) {
            arg1 = "GBP";
        }
        double convResult = 1;
        String arg0 = "GBP";

        convResult = getConversionRate(arg0, arg1);
        int rows = table.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            table.removeRow(i);
        }
        List<StockType> collectionStock = allStocks();

        Iterator itr = collectionStock.iterator();
        StockType nextStock;

        while (itr.hasNext()) {
            nextStock = (StockType) itr.next();
            List<String> name = new ArrayList();
            name.add(nextStock.getName());

            List<String> code = new ArrayList();
            code.add(nextStock.getCode());

            List<Integer> amount = new ArrayList();
            amount.add(nextStock.getShareNo());

            List<XMLGregorianCalendar> date = new ArrayList();
            XMLGregorianCalendar dateDeets = nextStock.getStockPrice().getDate();
            date.add(dateDeets);

            List<String> currrency = new ArrayList();
            String currencyDeets = arg1;
            currrency.add(currencyDeets);

            List<Double> price = new ArrayList();
            Double baseCost = nextStock.getStockPrice().getSharePrice();
            Double convPrice = baseCost * convResult;
            Double formatPrice = Double.parseDouble(df.format(convPrice));
            price.add(formatPrice);
            table.insertRow(table.getRowCount(), new Object[]{name.get(0), code.get(0), amount.get(0), currrency.get(0), price.get(0), date.get(0)});

        }
    }//GEN-LAST:event_updatePricesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(clientApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(clientApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(clientApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(clientApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new clientApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton AllRadioButton;
    private javax.swing.JRadioButton AmountRadioButton;
    private javax.swing.JButton BuyBtn;
    private javax.swing.JComboBox<String> CurrencyChoice;
    private javax.swing.JRadioButton DateRadioButton;
    private javax.swing.JRadioButton PriceRadioButton;
    private javax.swing.JButton SearchBtn;
    private javax.swing.JTextField SearchField;
    private javax.swing.JButton SellBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField buyAmount;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JEditorPane newsFeed;
    private javax.swing.JTextPane purchasePane;
    private javax.swing.JTextField sellAmount;
    private javax.swing.JTable stockTable;
    private javax.swing.JLabel title;
    private javax.swing.JLabel title1;
    private javax.swing.JButton updatePrices;
    // End of variables declaration//GEN-END:variables

    private static java.util.List<org.netbeans.xml.schema.shares.StockType> allStocks() {
        org.myws.StockWebService_Service service = new org.myws.StockWebService_Service();
        org.myws.StockWebService port = service.getStockWebServicePort();
        return port.allStocks();
    }

    private static java.util.List<org.netbeans.xml.schema.shares.StockType> priceOrder() {
        org.myws.StockWebService_Service service = new org.myws.StockWebService_Service();
        org.myws.StockWebService port = service.getStockWebServicePort();
        return port.priceOrder();
    }

    private static java.util.List<org.netbeans.xml.schema.shares.StockType> shareOrder() {
        org.myws.StockWebService_Service service = new org.myws.StockWebService_Service();
        org.myws.StockWebService port = service.getStockWebServicePort();
        return port.shareOrder();
    }

    private static java.util.List<org.netbeans.xml.schema.shares.StockType> dateOrder() {
        org.myws.StockWebService_Service service = new org.myws.StockWebService_Service();
        org.myws.StockWebService port = service.getStockWebServicePort();
        return port.dateOrder();
    }

    private static java.util.List<org.netbeans.xml.schema.shares.StockType> searchStock(java.lang.String arg0) {
        org.myws.StockWebService_Service service = new org.myws.StockWebService_Service();
        org.myws.StockWebService port = service.getStockWebServicePort();
        return port.searchStock(arg0);
    }

    private static boolean shareBuy(java.lang.String arg0, int arg1) {
        org.myws.StockWebService_Service service = new org.myws.StockWebService_Service();
        org.myws.StockWebService port = service.getStockWebServicePort();
        return port.shareBuy(arg0, arg1);
    }

    private static boolean shareSell(java.lang.String arg0, int arg1) {
        org.myws.StockWebService_Service service = new org.myws.StockWebService_Service();
        org.myws.StockWebService port = service.getStockWebServicePort();
        return port.shareSell(arg0, arg1);
    }

    private static java.util.List<java.lang.String> getCurrencyCodes() {
        docwebservices.CurrencyConversionWSService service = new docwebservices.CurrencyConversionWSService();
        docwebservices.CurrencyConversionWS port = service.getCurrencyConversionWSPort();
        return port.getCurrencyCodes();
    }

    private static double getConversionRate(java.lang.String arg0, java.lang.String arg1) {
        docwebservices.CurrencyConversionWSService service = new docwebservices.CurrencyConversionWSService();
        docwebservices.CurrencyConversionWS port = service.getCurrencyConversionWSPort();
        return port.getConversionRate(arg0, arg1);
    }

    private static void updatePrices() throws DatatypeConfigurationException_Exception {
        org.myws.StockWebService_Service service = new org.myws.StockWebService_Service();
        org.myws.StockWebService port = service.getStockWebServicePort();
        port.updatePrices();
    }

}
